An error occurred while executing the following cell:
------------------
# Example
dim = 2
# Set the hyperparameter for the NIW distribution
hyper_params = dict(loc=jnp.zeros(dim), mean_precision=0.05, df=dim + 5, scale=jnp.eye(dim))
# Generate the NIW object
dp_base_measure = NormalInverseWishart(**hyper_params)
key = random.PRNGKey(0)
num_of_samples = 1000
dp_concentrations = jnp.array([1.0, 2.0])
key, *subkeys = random.split(key, 3)
# Sampling from the DP mixture distribution
cluster_params1, cluster_indices1, samples1 = dp_mixgauss_sample(
    subkeys[0], num_of_samples, dp_concentrations[0], dp_base_measure
)
cluster_params2, cluster_indices2, samples2 = dp_mixgauss_sample(
    subkeys[1], num_of_samples, dp_concentrations[1], dp_base_measure
)

cluster_means = (cluster_params1["mu"], cluster_params2["mu"])
cluster_covs = (cluster_params1["Sigma"], cluster_params2["Sigma"])
samples = (samples1, samples2)
------------------

---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/tmp/ipykernel_3825/1377838591.py in <module>
      4 hyper_params = dict(loc=jnp.zeros(dim), mean_precision=0.05, df=dim + 5, scale=jnp.eye(dim))
      5 # Generate the NIW object
----> 6 dp_base_measure = NormalInverseWishart(**hyper_params)
      7 key = random.PRNGKey(0)
      8 num_of_samples = 1000

~/miniconda3/envs/py37/lib/python3.7/site-packages/tensorflow_probability/substrates/jax/distributions/joint_distribution_named.py in __new__(cls, *args, **kwargs)
    472     if not all(isinstance(d, tf.__internal__.CompositeTensor) or callable(d)
    473                for d in tf.nest.flatten(model)):
--> 474       return _JointDistributionNamed(*args, **kwargs)
    475     return super(JointDistributionNamed, cls).__new__(cls)
    476 

~/miniconda3/envs/py37/lib/python3.7/site-packages/decorator.py in fun(*args, **kw)
    229         def fun(*args, **kw):
    230             if not kwsyntax:
--> 231                 args, kw = fix(args, kw, sig)
    232             return caller(func, *(extras + args), **kw)
    233     fun.__name__ = func.__name__

~/miniconda3/envs/py37/lib/python3.7/site-packages/decorator.py in fix(args, kwargs, sig)
    201     Fix args and kwargs to be consistent with the signature
    202     """
--> 203     ba = sig.bind(*args, **kwargs)
    204     ba.apply_defaults()  # needed for test_dan_schult
    205     return ba.args, ba.kwargs

~/miniconda3/envs/py37/lib/python3.7/inspect.py in bind(*args, **kwargs)
   3013         if the passed arguments can not be bound.
   3014         """
-> 3015         return args[0]._bind(args[1:], kwargs)
   3016 
   3017     def bind_partial(*args, **kwargs):

~/miniconda3/envs/py37/lib/python3.7/inspect.py in _bind(self, args, kwargs, partial)
   2928                             msg = 'missing a required argument: {arg!r}'
   2929                             msg = msg.format(arg=param.name)
-> 2930                             raise TypeError(msg) from None
   2931             else:
   2932                 # We have a positional argument to process

TypeError: missing a required argument: 'model'
TypeError: missing a required argument: 'model'
