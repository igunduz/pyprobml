An error occurred while executing the following cell:
------------------
# Generate data and cluster it via gmm and dp_mixgauss

data_set = {}
samples_set = {}

for m_precision in mean_precisions:
    print(f"Example with the precision parameter of the NIW prior being {m_precision}.")
    print("Generating data ...")

    # Generating the true data from a finite mixture model
    key = random.PRNGKey(0)
    key, *subkeys = random.split(key, 4)
    niw_params = dict(loc=jnp.zeros(dim), mean_precision=m_precision, df=dim + 5, scale=jnp.eye(dim))
    niw = NormalInverseWishart(**niw_params)
    cluster_weights = random.dirichlet(subkeys[0], 5.0 * jnp.ones(n_clusters_true))

    # cluster assignment of each datum
    cluster_indices = random.categorical(subkeys[1], jnp.log(cluster_weights), shape=(n_data,))
    cluster_params = niw.sample(seed=subkeys[2], sample_shape=(n_clusters_true,))
    cluster_covs = cluster_params["Sigma"]
    cluster_means = cluster_params["mu"]

    # data
    mean_per_datum = cluster_means[cluster_indices]
    cov_per_datum = cluster_covs[cluster_indices]
    key, *subkeys = random.split(key, n_data + 1)
    data = vmap(random.multivariate_normal, in_axes=(0, 0, 0))(jnp.array(subkeys), mean_per_datum, cov_per_datum)
    dname = f"data_{_replace_period(m_precision)}"
    data_set[dname] = data

    print("Begin clustering via...")
    # Clustering via finite mixture model
    for n_clusters in n_clusters_input:
        print(f"finite mixture model with K = {n_clusters};")
        gmm_samples = gmm_gibbs(key, burn_in + n_gibbs_samples, data, concentration, n_clusters, niw_params)
        gmm_samples = gmm_samples[burn_in:]
        fname = f"gmm_{n_clusters}_data_{_replace_period(m_precision)}"
        samples_set[fname] = gmm_samples

    # Clustering via DP mixture model
    print(f"DP mixture model.")
    dp_samples = dp_mixgauss_gibbs(key, burn_in + n_gibbs_samples, data, concentration, niw_params)
    dp_samples = dp_samples[burn_in:]
    fname = f"dp_data_{_replace_period(m_precision)}"
    samples_set[fname] = dp_samples
    print("Finish clustering.")
------------------

---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/tmp/ipykernel_3221/2480327300.py in <module>
     12     key, *subkeys = random.split(key, 4)
     13     niw_params = dict(loc=jnp.zeros(dim), mean_precision=m_precision, df=dim + 5, scale=jnp.eye(dim))
---> 14     niw = NormalInverseWishart(**niw_params)
     15     cluster_weights = random.dirichlet(subkeys[0], 5.0 * jnp.ones(n_clusters_true))
     16 

~/miniconda3/envs/py37/lib/python3.7/site-packages/tensorflow_probability/substrates/jax/distributions/joint_distribution_named.py in __new__(cls, *args, **kwargs)
    472     if not all(isinstance(d, tf.__internal__.CompositeTensor) or callable(d)
    473                for d in tf.nest.flatten(model)):
--> 474       return _JointDistributionNamed(*args, **kwargs)
    475     return super(JointDistributionNamed, cls).__new__(cls)
    476 

~/miniconda3/envs/py37/lib/python3.7/site-packages/decorator.py in fun(*args, **kw)
    229         def fun(*args, **kw):
    230             if not kwsyntax:
--> 231                 args, kw = fix(args, kw, sig)
    232             return caller(func, *(extras + args), **kw)
    233     fun.__name__ = func.__name__

~/miniconda3/envs/py37/lib/python3.7/site-packages/decorator.py in fix(args, kwargs, sig)
    201     Fix args and kwargs to be consistent with the signature
    202     """
--> 203     ba = sig.bind(*args, **kwargs)
    204     ba.apply_defaults()  # needed for test_dan_schult
    205     return ba.args, ba.kwargs

~/miniconda3/envs/py37/lib/python3.7/inspect.py in bind(*args, **kwargs)
   3013         if the passed arguments can not be bound.
   3014         """
-> 3015         return args[0]._bind(args[1:], kwargs)
   3016 
   3017     def bind_partial(*args, **kwargs):

~/miniconda3/envs/py37/lib/python3.7/inspect.py in _bind(self, args, kwargs, partial)
   2928                             msg = 'missing a required argument: {arg!r}'
   2929                             msg = msg.format(arg=param.name)
-> 2930                             raise TypeError(msg) from None
   2931             else:
   2932                 # We have a positional argument to process

TypeError: missing a required argument: 'model'
TypeError: missing a required argument: 'model'
