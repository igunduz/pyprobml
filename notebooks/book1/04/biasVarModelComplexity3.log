An error occurred while executing the following cell:
------------------
import matplotlib.pyplot as plt
import numpy as np
from numpy.linalg import cholesky
from numpy import linalg


def gaussSample(mu, sigma, n):
    A = cholesky(sigma)
    Z = np.random.normal(loc=0, scale=1, size=(len(mu), n))
    return np.dot(A, Z).T + mu


def ridge(X, y, lam):
    """
    This function can be completed pinv as well
    """
    W = np.dot(linalg.pinv((np.dot(X.T, X) + np.sqrt(lam) * np.eye(X.shape[0]))), np.dot(X.T, y))
    return W


def basisExpansion(X, s=None, centers=[]):
    n = 25
    if not s:
        s = np.std(X) / np.sqrt(n)

    if not len(centers):
        centers = X[1:]

    Xbasis = np.ones((X.shape[0], n))
    for i in range(1, n):
        Xbasis[:, i] = np.ravel(np.exp((-1 / (2 * s**2)) * (X - centers[i - 1]) ** 2))
    return Xbasis, s, centers


def fun(X):
    """
    Cosine function
    """
    return np.cos(2 * np.pi * X)


def synthesizeData(n, d):
    sigma = np.array([[0.1]])
    mu = np.array([0])
    X = np.random.rand(n, d)
    y = fun(X) + gaussSample(mu, sigma, n)
    return X, y


n = 25
d = 1
lambdas = [np.exp(5), np.exp(-5)]
ndataSets = 100
showNsets = 20
np.random.seed(42)

domain = np.arange(0, 1, 0.0005)
fs = 16

nr = 2
nc = 2

fig, ax = plt.subplots(2, 2, figsize=(12, 9))
for lam in range(len(lambdas)):
    yhat = np.zeros((len(domain), ndataSets))
    for j in range(ndataSets):
        X, y = synthesizeData(n, d)
        X, s, centers = basisExpansion(X)
        W = ridge(X, y, lambdas[lam])
        yhat[:, j] = np.ravel(np.dot(basisExpansion(domain, s, centers)[0], W))

    ax[lam, 0].plot(domain[..., np.newaxis].repeat(20, axis=1), yhat[:, :showNsets], color="#ff7f00")
    ax[lam, 0].set_xlim([-0.1, 1.1])
    ax[lam, 0].set_ylim([-1.5, 1.5])
    ax[lam, 0].set_title("ln($\lambda$) = {}".format(np.log(lambdas[lam])))

    ax[lam, 1].plot(domain, fun(domain), lineWidth=2.5)
    ax[lam, 1].plot(domain, np.mean(yhat, axis=1), linestyle=":", lineWidth=2.5)
    ax[lam, 1].set_title("ln($\lambda$) = {}".format(np.log(lambdas[lam])))

fig.savefig("figures/biasVarModelComplexityV3.png")
------------------

---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Input In [1], in <cell line: 64>()
     74 ax[lam, 0].set_ylim([-1.5, 1.5])
     75 ax[lam, 0].set_title("ln($\lambda$) = {}".format(np.log(lambdas[lam])))
---> 77 ax[lam, 1].plot(domain, fun(domain), lineWidth=2.5)
     78 ax[lam, 1].plot(domain, np.mean(yhat, axis=1), linestyle=":", lineWidth=2.5)
     79 ax[lam, 1].set_title("ln($\lambda$) = {}".format(np.log(lambdas[lam])))

File /usr/local/lib/python3.9/dist-packages/matplotlib/axes/_axes.py:1632, in Axes.plot(self, scalex, scaley, data, *args, **kwargs)
   1390 """
   1391 Plot y versus x as lines and/or markers.
   1392 
   (...)
   1629 (``'green'``) or hex strings (``'#008000'``).
   1630 """
   1631 kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)
-> 1632 lines = [*self._get_lines(*args, data=data, **kwargs)]
   1633 for line in lines:
   1634     self.add_line(line)

File /usr/local/lib/python3.9/dist-packages/matplotlib/axes/_base.py:312, in _process_plot_var_args.__call__(self, data, *args, **kwargs)
    310     this += args[0],
    311     args = args[1:]
--> 312 yield from self._plot_args(this, kwargs)

File /usr/local/lib/python3.9/dist-packages/matplotlib/axes/_base.py:538, in _process_plot_var_args._plot_args(self, tup, kwargs, return_kwargs)
    536     return list(result)
    537 else:
--> 538     return [l[0] for l in result]

File /usr/local/lib/python3.9/dist-packages/matplotlib/axes/_base.py:538, in <listcomp>(.0)
    536     return list(result)
    537 else:
--> 538     return [l[0] for l in result]

File /usr/local/lib/python3.9/dist-packages/matplotlib/axes/_base.py:531, in <genexpr>(.0)
    528 else:
    529     labels = [label] * n_datasets
--> 531 result = (make_artist(x[:, j % ncx], y[:, j % ncy], kw,
    532                       {**kwargs, 'label': label})
    533           for j, label in enumerate(labels))
    535 if return_kwargs:
    536     return list(result)

File /usr/local/lib/python3.9/dist-packages/matplotlib/axes/_base.py:351, in _process_plot_var_args._makeline(self, x, y, kw, kwargs)
    349 default_dict = self._getdefaults(set(), kw)
    350 self._setdefaults(default_dict, kw)
--> 351 seg = mlines.Line2D(x, y, **kw)
    352 return seg, kw

File /usr/local/lib/python3.9/dist-packages/matplotlib/lines.py:393, in Line2D.__init__(self, xdata, ydata, linewidth, linestyle, color, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)
    389 self.set_markeredgewidth(markeredgewidth)
    391 # update kwargs before updating data to give the caller a
    392 # chance to init axes (and hence unit support)
--> 393 self.update(kwargs)
    394 self.pickradius = pickradius
    395 self.ind_offset = 0

File /usr/local/lib/python3.9/dist-packages/matplotlib/artist.py:1064, in Artist.update(self, props)
   1062             func = getattr(self, f"set_{k}", None)
   1063             if not callable(func):
-> 1064                 raise AttributeError(f"{type(self).__name__!r} object "
   1065                                      f"has no property {k!r}")
   1066             ret.append(func(v))
   1067 if ret:

AttributeError: 'Line2D' object has no property 'lineWidth'
AttributeError: 'Line2D' object has no property 'lineWidth'
